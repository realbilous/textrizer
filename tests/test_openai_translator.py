import pytest
from src.translator.openai_translator import OpenAITranslator
from langchain_openai import ChatOpenAI
from unittest.mock import patch, Mock
# TODO: Tests were generated by AI, need to be refactored
class TestOpenAITranslator:
    """Test suite for OpenAITranslator class"""

    @pytest.fixture(autouse=True)
    def setup(self):
        """Setup test instance"""
        self.translator = OpenAITranslator(model="gpt-4o-mini", temperature=0.1)

    def test_init(self):
        """Test translator initialization with custom parameters"""
        translator = OpenAITranslator(model="gpt-4o-mini", temperature=0.1)
        assert translator.model == "gpt-4o-mini"
        assert isinstance(translator.client, ChatOpenAI)

    def test_init_default(self):
        """Test translator initialization with default values"""
        translator = OpenAITranslator()
        assert translator.model == "gpt-4o-mini"
        assert isinstance(translator.client, ChatOpenAI)

    def test_translate_structure(self):
        """Test the structure of translate method response"""
        result = self.translator.translate("Hello", "es")
        
        assert isinstance(result, dict)
        assert "translated_text" in result
        assert "target_language" in result
        assert "model" in result
        assert result["target_language"] == "es"
        assert result["model"] == "gpt-4o-mini"

    def test_batch_translate_structure(self):
        """Test the structure of batch_translate method response"""
        texts = ["Hello", "World"]
        results = self.translator.batch_translate(texts, "fr")
        
        assert isinstance(results, list)
        assert len(results) == 2
        
        for result in results:
            assert isinstance(result, dict)
            assert "translated_text" in result
            assert "target_language" in result
            assert result["target_language"] == "fr"


def test_translate_with_different_model():
    """Test translation with a different model"""
    with patch('src.translator.openai_translator.ChatOpenAI') as mock:
        instance = Mock()
        instance.predict.return_value = "Translated text"
        mock.return_value = instance
        
        translator = OpenAITranslator(model="gpt-3.5-turbo", temperature=0.2)
        result = translator.translate("Hello world", "de")
        
        # Verify the model was initialized correctly
        mock.assert_called_once_with(model_name="gpt-3.5-turbo", temperature=0.2)
        assert result["model"] == "gpt-3.5-turbo"

def test_translate_error_handling():
    """Test error handling during translation"""
    with patch('src.translator.openai_translator.ChatOpenAI') as mock:
        instance = Mock()
        instance.predict.side_effect = Exception("API Error")
        mock.return_value = instance
        
        translator = OpenAITranslator()
        with pytest.raises(Exception) as exc_info:
            translator.translate("Hello world", "es")
        
        assert str(exc_info.value) == "API Error" 